<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_vector_field_creator_8cpp" kind="file" language="C++">
    <compoundname>VectorFieldCreator.cpp</compoundname>
    <includes refid="_vector_field_creator_8h" local="yes">VectorFieldCreator.h</includes>
    <includes local="no">iostream</includes>
    <includes refid="_cu2_o_se_o3_8h" local="yes">Crystals/Cu2OSeO3.h</includes>
    <includes local="no">pybind11/numpy.h</includes>
    <includes local="no">pybind11/pybind11.h</includes>
    <incdepgraph>
      <node id="205">
        <label>cmath</label>
      </node>
      <node id="200">
        <label>VectorFieldCreator.h</label>
        <link refid="_vector_field_creator_8h"/>
        <childnode refid="201" relation="include">
        </childnode>
        <childnode refid="210" relation="include">
        </childnode>
        <childnode refid="211" relation="include">
        </childnode>
      </node>
      <node id="208">
        <label>MomentField.h</label>
        <link refid="_moment_field_8h"/>
        <childnode refid="203" relation="include">
        </childnode>
        <childnode refid="209" relation="include">
        </childnode>
        <childnode refid="210" relation="include">
        </childnode>
        <childnode refid="211" relation="include">
        </childnode>
      </node>
      <node id="210">
        <label>string</label>
      </node>
      <node id="211">
        <label>pybind11/numpy.h</label>
      </node>
      <node id="199">
        <label>MuDip/VectorFieldCreator.cpp</label>
        <link refid="_vector_field_creator_8cpp"/>
        <childnode refid="200" relation="include">
        </childnode>
        <childnode refid="212" relation="include">
        </childnode>
        <childnode refid="213" relation="include">
        </childnode>
        <childnode refid="211" relation="include">
        </childnode>
        <childnode refid="214" relation="include">
        </childnode>
      </node>
      <node id="202">
        <label>Dipole.h</label>
        <link refid="_dipole_8h"/>
        <childnode refid="203" relation="include">
        </childnode>
        <childnode refid="204" relation="include">
        </childnode>
      </node>
      <node id="204">
        <label>Constants.h</label>
        <link refid="_constants_8h"/>
        <childnode refid="205" relation="include">
        </childnode>
      </node>
      <node id="213">
        <label>Crystals/Cu2OSeO3.h</label>
        <link refid="_cu2_o_se_o3_8h"/>
        <childnode refid="206" relation="include">
        </childnode>
      </node>
      <node id="207">
        <label>CellAtom.h</label>
        <link refid="_cell_atom_8h"/>
        <childnode refid="202" relation="include">
        </childnode>
      </node>
      <node id="203">
        <label>vector</label>
      </node>
      <node id="214">
        <label>pybind11/pybind11.h</label>
      </node>
      <node id="206">
        <label>Sample.h</label>
        <link refid="_sample_8h"/>
        <childnode refid="203" relation="include">
        </childnode>
        <childnode refid="207" relation="include">
        </childnode>
        <childnode refid="208" relation="include">
        </childnode>
      </node>
      <node id="212">
        <label>iostream</label>
      </node>
      <node id="201">
        <label>LorentzSphere.h</label>
        <link refid="_lorentz_sphere_8h"/>
        <childnode refid="202" relation="include">
        </childnode>
        <childnode refid="206" relation="include">
        </childnode>
      </node>
      <node id="209">
        <label>complex</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_vector_field_creator_8h" kindref="compound">VectorFieldCreator.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_cu2_o_se_o3_8h" kindref="compound">Crystals/Cu2OSeO3.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;pybind11/numpy.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;pybind11/pybind11.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">py<sp/>=<sp/>pybind11;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal">VectorFieldCreator::VectorFieldCreator(<ref refid="class_moment_field" kindref="compound">MomentField</ref><sp/>momentFieldIn,<sp/><ref refid="class_sample" kindref="compound">Sample</ref><sp/>sampleIn,<sp/>py::array_t&lt;double&gt;<sp/>muonPositionsIn,</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startCellIn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>endCellIn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>resolutionIn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>radiusIn,<sp/>py::array_t&lt;double&gt;<sp/>BAppliedIn,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>zIn)<sp/>:</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Initialiser<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal">momentField(momentFieldIn),<sp/>sample(sampleIn),<sp/>muonPositions(muonPositionsIn),<sp/>startCell(startCellIn),</highlight></codeline>
<codeline lineno="15"><highlight class="normal">endCell(endCellIn),<sp/>resolution(resolutionIn),<sp/>radius(radiusIn),<sp/>BApplied(BAppliedIn),<sp/>z(zIn)<sp/>{}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal">py::array_t&lt;double&gt;<sp/><ref refid="class_vector_field_creator_1a160b37371b6853430e4d563920eca2e0" kindref="member">VectorFieldCreator::outputBField</ref>()</highlight></codeline>
<codeline lineno="26"><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialise<sp/>the<sp/>output<sp/>array,<sp/>which<sp/>looks<sp/>like<sp/>[[x1,<sp/>x2,<sp/>...],<sp/>[y1,<sp/>y1,<sp/>...],<sp/>[B_x1,<sp/>B_x2,<sp/>...],<sp/>[B_y1,<sp/>B_y2,<sp/>...]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>componentLength<sp/>=<sp/>pow(((endCell<sp/>-<sp/>startCell)<sp/>/<sp/>resolution),<sp/>2)<sp/>*<sp/>len(muonPositions);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>py::array_t&lt;double&gt;<sp/>outputBArray({4,<sp/>componentLength});</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Bindex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>startCell;<sp/>j<sp/>&lt;<sp/>endCell;<sp/>j<sp/>=<sp/>j<sp/>+<sp/>resolution)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>startCell;<sp/>i<sp/>&lt;<sp/>endCell;<sp/>i<sp/>=<sp/>i<sp/>+<sp/>resolution)</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>muonIndex<sp/>=<sp/>0;<sp/>muonIndex<sp/>&lt;<sp/>len(muonPositions);<sp/>muonIndex++)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py::print(i,<sp/>j,<sp/>muonIndex);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xPos<sp/>=<sp/>i<sp/>+<sp/>muonPositions.mutable_at(muonIndex,<sp/>0);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yPos<sp/>=<sp/>j<sp/>+<sp/>muonPositions.mutable_at(muonIndex,<sp/>1);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>zPos<sp/>=<sp/>z<sp/>+<sp/>muonPositions.mutable_at(muonIndex,<sp/>2);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py::array_t&lt;double&gt;<sp/>Bfield<sp/>=<sp/>sample.<ref refid="class_sample_1ab500cba49bb9ec691d668cf8d82d1ea4" kindref="member">getTotalField</ref>(xPos,<sp/>yPos,<sp/>zPos,<sp/>radius);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outputBArray.mutable_at(0,<sp/>Bindex)<sp/>=<sp/>xPos;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outputBArray.mutable_at(1,<sp/>Bindex)<sp/>=<sp/>yPos;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outputBArray.mutable_at(2,<sp/>Bindex)<sp/>=<sp/>Bfield.mutable_at(0)<sp/>+<sp/>BApplied.mutable_at(0);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outputBArray.mutable_at(3,<sp/>Bindex)<sp/>=<sp/>Bfield.mutable_at(1)<sp/>+<sp/>BApplied.mutable_at(1);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Bindex++;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>outputBArray;</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal">py::array_t&lt;double&gt;<sp/><ref refid="class_vector_field_creator_1a15087c020366e469d259caa32118cdee" kindref="member">VectorFieldCreator::outputMField</ref>()</highlight></codeline>
<codeline lineno="63"><highlight class="normal">{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialise<sp/>the<sp/>output<sp/>array,<sp/>which<sp/>looks<sp/>like<sp/>[[x1,<sp/>x2,<sp/>...],<sp/>[y1,<sp/>y1,<sp/>...],<sp/>[m_x1,<sp/>m_x2,<sp/>...],<sp/>[m_y1,<sp/>m_y2,<sp/>...]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>componentLength<sp/>=<sp/>pow(((endCell<sp/>-<sp/>startCell)),<sp/>2)<sp/>*<sp/>sample.getAtoms().size();</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>py::array_t&lt;double&gt;<sp/>outputMArray({4,<sp/>componentLength});</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Mindex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>startCell;<sp/>j<sp/>&lt;<sp/>endCell;<sp/>j++)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>startCell;<sp/>i<sp/>&lt;<sp/>endCell;<sp/>i++)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>atomIndex<sp/>=<sp/>0;<sp/>atomIndex<sp/>&lt;<sp/>sample.getAtoms().size();<sp/>atomIndex++)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>atomXPos<sp/>=<sp/>i<sp/>+<sp/>sample.getAtoms()[atomIndex].getX();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>atomYPos<sp/>=<sp/>j<sp/>+<sp/>sample.getAtoms()[atomIndex].getY();</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>atomZPos<sp/>=<sp/>z<sp/>+<sp/>sample.getAtoms()[atomIndex].getZ();</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>momentVec<sp/>=<sp/>momentField.<ref refid="class_moment_field_1ac53a73c633968b223206e79b040785e3" kindref="member">getMoment</ref>(atomXPos,<sp/>atomYPos,<sp/>z);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sample.getAtoms()[atomIndex].getFlipped())</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cartesianIndex<sp/>=<sp/>0;<sp/>cartesianIndex<sp/>&lt;<sp/>momentVec.size();<sp/>cartesianIndex++)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>momentVec[cartesianIndex]<sp/>=<sp/>-momentVec[cartesianIndex];</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outputMArray.mutable_at(0,<sp/>Mindex)<sp/>=<sp/>atomXPos;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outputMArray.mutable_at(1,<sp/>Mindex)<sp/>=<sp/>atomYPos;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outputMArray.mutable_at(2,<sp/>Mindex)<sp/>=<sp/>momentVec[0];</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outputMArray.mutable_at(3,<sp/>Mindex)<sp/>=<sp/>momentVec[1];</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mindex++;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>outputMArray;</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="MuDip/VectorFieldCreator.cpp"/>
  </compounddef>
</doxygen>
